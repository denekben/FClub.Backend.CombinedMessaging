// <auto-generated />
using System;
using AccessControl.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccessControl.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250424193819_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FClub.AccessControl")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccessControl.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                            IsBlocked = false
                        },
                        new
                        {
                            Id = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                            IsBlocked = false
                        },
                        new
                        {
                            Id = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                            IsBlocked = false
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("CurrentClientQuantity")
                        .HasColumnType("bigint");

                    b.Property<long>("MaxOccupancy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 19, DateTimeKind.Utc).AddTicks(1688),
                            CurrentClientQuantity = 0L,
                            MaxOccupancy = 200L,
                            Name = "Филиал на Юго-Западной"
                        },
                        new
                        {
                            Id = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 19, DateTimeKind.Utc).AddTicks(1885),
                            CurrentClientQuantity = 0L,
                            MaxOccupancy = 150L,
                            Name = "Филиал на Воронцовской"
                        },
                        new
                        {
                            Id = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 19, DateTimeKind.Utc).AddTicks(1899),
                            CurrentClientQuantity = 0L,
                            MaxOccupancy = 150L,
                            Name = "Филиал на Тверской"
                        },
                        new
                        {
                            Id = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 19, DateTimeKind.Utc).AddTicks(1917),
                            CurrentClientQuantity = 0L,
                            MaxOccupancy = 300L,
                            Name = "Филиал на Адмиралтейской"
                        },
                        new
                        {
                            Id = new Guid("95a1368b-142b-455b-933c-3ac4f936de69"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 19, DateTimeKind.Utc).AddTicks(1930),
                            CurrentClientQuantity = 0L,
                            MaxOccupancy = 100L,
                            Name = "Филиал на Плотинке"
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7054),
                            Email = "iolovich@yandex.ru",
                            IsStaff = true,
                            Phone = "+78005553535"
                        },
                        new
                        {
                            Id = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7250),
                            Email = "ivanov@yandex.ru",
                            IsStaff = true,
                            Phone = "+78005553535"
                        },
                        new
                        {
                            Id = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7285),
                            Email = "petrov@yandex.ru",
                            IsStaff = true,
                            Phone = "+79991001010"
                        },
                        new
                        {
                            Id = new Guid("1db4505a-02f3-49a5-9837-aec1b0ecca44"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7310),
                            Email = "ivanov@example.com",
                            IsStaff = false,
                            Phone = "+79991234567"
                        },
                        new
                        {
                            Id = new Guid("287bc96f-469a-4acb-9f83-ca0932c787e2"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7328),
                            Email = "petrov@example.com",
                            IsStaff = false,
                            Phone = "+79992345678"
                        },
                        new
                        {
                            Id = new Guid("754d703a-f1ea-425a-b3eb-b98829627774"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7349),
                            Email = "sidorova@example.com",
                            IsStaff = false,
                            Phone = "+79993456789"
                        },
                        new
                        {
                            Id = new Guid("d789e2e0-13d7-4fdb-9b38-2df0675525fc"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7369),
                            Email = "kuznetsova@example.com",
                            IsStaff = false,
                            Phone = "+79994567890"
                        },
                        new
                        {
                            Id = new Guid("3294e0e3-6409-431b-8ed2-db3819ebc635"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7387),
                            Email = "smirnov@example.com",
                            IsStaff = false,
                            Phone = "+79995678901"
                        },
                        new
                        {
                            Id = new Guid("ed8a6578-96f3-4891-a816-ef0559b27ed3"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7403),
                            Email = "popova@example.com",
                            IsStaff = false,
                            Phone = "+79996789012"
                        },
                        new
                        {
                            Id = new Guid("a783ccef-eaf0-415d-b72a-6dffeeb247f5"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7419),
                            Email = "vasilev@example.com",
                            IsStaff = false,
                            Phone = "+79997890123"
                        },
                        new
                        {
                            Id = new Guid("d1cbac4f-29bb-46ad-a6dd-b987523de71a"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 25, DateTimeKind.Utc).AddTicks(7435),
                            Email = "novikova@example.com",
                            IsStaff = false,
                            Phone = "+79998901234"
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.EntryLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BranchName")
                        .HasColumnType("text");

                    b.Property<string>("ClientFullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntryType")
                        .HasColumnType("integer");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<Guid>("TurnstileId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TurnstileId");

                    b.ToTable("EntryLogs", "FClub.AccessControl");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.HasIndex("TariffId");

                    b.ToTable("Memberships", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("82347d00-1363-4f40-99de-50b4096d44c8"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ClientId = new Guid("1db4505a-02f3-49a5-9837-aec1b0ecca44"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2161),
                            ExpiresDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("f34285ab-2bfa-47a2-bda8-5ad707e24c8b"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ClientId = new Guid("287bc96f-469a-4acb-9f83-ca0932c787e2"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2286),
                            ExpiresDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("3a1d21d6-3bc4-4f26-ba7e-1ef9bb3b5286"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ClientId = new Guid("754d703a-f1ea-425a-b3eb-b98829627774"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2290),
                            ExpiresDate = new DateTime(2025, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("b661a029-3d11-43c2-a652-f233cdc7bc3e"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ClientId = new Guid("d789e2e0-13d7-4fdb-9b38-2df0675525fc"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2293),
                            ExpiresDate = new DateTime(2025, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("25825c4c-e04f-40c6-a00d-4a9dfbdbb91d"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ClientId = new Guid("3294e0e3-6409-431b-8ed2-db3819ebc635"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2296),
                            ExpiresDate = new DateTime(2025, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("b9e3f831-eb10-414b-93c1-b0888d970c9f"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ClientId = new Guid("ed8a6578-96f3-4891-a816-ef0559b27ed3"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2300),
                            ExpiresDate = new DateTime(2025, 10, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("7898f7a6-6f24-47e8-bf6d-7766e1638878"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ClientId = new Guid("a783ccef-eaf0-415d-b72a-6dffeeb247f5"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2304),
                            ExpiresDate = new DateTime(2026, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("53a621b5-fedc-4fc9-9232-6a62858d8e59"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ClientId = new Guid("d1cbac4f-29bb-46ad-a6dd-b987523de71a"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 27, DateTimeKind.Utc).AddTicks(2307),
                            ExpiresDate = new DateTime(2026, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBranches", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a555d64e-15ec-44bd-8f66-b1b0dfcbb194"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef")
                        },
                        new
                        {
                            Id = new Guid("3f05477d-e461-45f5-815b-c3ee4f6cead6"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451")
                        },
                        new
                        {
                            Id = new Guid("254f5a76-f7c6-499a-8188-070ac113a34c"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ServiceId = new Guid("8d313217-d403-4368-8744-d44013db63ad")
                        },
                        new
                        {
                            Id = new Guid("fb095e82-6b14-4b72-9cf8-f5de556918b3"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ServiceId = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69")
                        },
                        new
                        {
                            Id = new Guid("9c0c14e8-bfd5-4be0-8a7c-41e12d28783e"),
                            BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a")
                        },
                        new
                        {
                            Id = new Guid("04152a62-d357-4357-96e8-6de53cd2d9a3"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef")
                        },
                        new
                        {
                            Id = new Guid("badadc9c-45bd-4312-9220-c6f29d5aa095"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451")
                        },
                        new
                        {
                            Id = new Guid("a9f39f1b-a1fb-440a-a4e6-4c9b8a79f000"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69")
                        },
                        new
                        {
                            Id = new Guid("e73aca6e-6527-4fa2-98e6-6ef686c0401d"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2")
                        },
                        new
                        {
                            Id = new Guid("454491e2-36b2-4cdf-a958-1784c43cab92"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a")
                        },
                        new
                        {
                            Id = new Guid("ef48ac8b-8598-4b22-8714-394df231abb5"),
                            BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                            ServiceId = new Guid("81c16014-83ce-4570-bd16-51e9ef4187b5")
                        },
                        new
                        {
                            Id = new Guid("841e3ac8-8327-42fb-873a-13ccd523020a"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef")
                        },
                        new
                        {
                            Id = new Guid("28d5d133-0ca0-44f3-b1f0-caa72af55b41"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ServiceId = new Guid("8d313217-d403-4368-8744-d44013db63ad")
                        },
                        new
                        {
                            Id = new Guid("dfeb0375-b1fb-4caa-a78d-1b65fdf5edcc"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2")
                        },
                        new
                        {
                            Id = new Guid("6ecf3d3b-ca83-470d-825e-d996f263adca"),
                            BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a")
                        },
                        new
                        {
                            Id = new Guid("92996e26-1b77-45ba-999a-1cf98cffa845"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef")
                        },
                        new
                        {
                            Id = new Guid("8755e66e-0268-4dad-a7e8-5c9704cf0f4d"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451")
                        },
                        new
                        {
                            Id = new Guid("616efb28-d857-4062-8a58-e352795346f1"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("8d313217-d403-4368-8744-d44013db63ad")
                        },
                        new
                        {
                            Id = new Guid("cd24c8e0-8c95-4f49-b8e7-f93ee8bf2565"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a")
                        },
                        new
                        {
                            Id = new Guid("35bd287b-67a6-4dab-8bd2-e7d1293abad7"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2")
                        },
                        new
                        {
                            Id = new Guid("6f998816-ac33-41a3-ac5e-41c783a09603"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69")
                        },
                        new
                        {
                            Id = new Guid("3839fa0e-d877-497a-be9e-50ae909f6a34"),
                            BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                            ServiceId = new Guid("81c16014-83ce-4570-bd16-51e9ef4187b5")
                        },
                        new
                        {
                            Id = new Guid("ab474a82-920d-45ed-a1aa-34d7309927e5"),
                            BranchId = new Guid("95a1368b-142b-455b-933c-3ac4f936de69"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef")
                        },
                        new
                        {
                            Id = new Guid("48fba502-23da-47d1-8411-84eef6c116bb"),
                            BranchId = new Guid("95a1368b-142b-455b-933c-3ac4f936de69"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451")
                        },
                        new
                        {
                            Id = new Guid("18f63434-0ca1-4ea1-a9b8-638eaf93da0d"),
                            BranchId = new Guid("95a1368b-142b-455b-933c-3ac4f936de69"),
                            ServiceId = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69")
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TariffId");

                    b.ToTable("ServiceTariffs", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d8999af-6bed-4ff2-89c7-5f827da036ee"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef"),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("c1c7c03c-8380-44a3-882b-9954884056e4"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451"),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("0e167d4b-45b8-44bf-9f9d-86dcc6c37c70"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a"),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("e45a7d13-6f35-4836-bc68-602e3997e09d"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2"),
                            TariffId = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba")
                        },
                        new
                        {
                            Id = new Guid("00c25001-11d7-426e-8213-1478be2b9e34"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef"),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("4b337ef0-663a-4046-bd6f-12ef6a28bb78"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451"),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("52fa1b9c-a615-466b-8710-626a3fa3e00e"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a"),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("83bc5ea4-60f4-4332-bca3-b28734526de6"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2"),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("e7bcd2e8-f60f-4363-9bc0-d962305bbb2c"),
                            ServiceId = new Guid("8d313217-d403-4368-8744-d44013db63ad"),
                            TariffId = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794")
                        },
                        new
                        {
                            Id = new Guid("67b598ae-2ca1-4d85-b9e6-eb1c9c5c4250"),
                            ServiceId = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("b4d02fa4-890b-4f2d-a2a2-6aa627d6afee"),
                            ServiceId = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("41a41f2d-7bef-414b-801b-66a7d7be33d6"),
                            ServiceId = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("486f0065-bc54-4b53-925b-7e0a1a2dd522"),
                            ServiceId = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("d18e55eb-92af-4f83-b251-0751eef2be35"),
                            ServiceId = new Guid("8d313217-d403-4368-8744-d44013db63ad"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("e8d54a03-88cb-4a4e-a94e-77cab40b38c7"),
                            ServiceId = new Guid("81c16014-83ce-4570-bd16-51e9ef4187b5"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        },
                        new
                        {
                            Id = new Guid("f86e08f0-8fcd-4010-b2c7-71884200616a"),
                            ServiceId = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69"),
                            TariffId = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd")
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Services", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f42cee3e-3e27-45e9-9a17-bb991a69f2ef"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(3930),
                            Name = "Тренажерный зал"
                        },
                        new
                        {
                            Id = new Guid("81c16014-83ce-4570-bd16-51e9ef4187b5"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4098),
                            Name = "Хамам"
                        },
                        new
                        {
                            Id = new Guid("8d313217-d403-4368-8744-d44013db63ad"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4101),
                            Name = "Бассейн"
                        },
                        new
                        {
                            Id = new Guid("23ad6d27-f2ea-4f57-a2e3-6a36e33fad69"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4103),
                            Name = "Спа зона"
                        },
                        new
                        {
                            Id = new Guid("0c3ed5b6-9ea4-428b-8931-086a41951451"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4105),
                            Name = "Кроссфит зона"
                        },
                        new
                        {
                            Id = new Guid("20b848e4-13fd-43d3-9452-763b6435e7c2"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4106),
                            Name = "Боксерская зона"
                        },
                        new
                        {
                            Id = new Guid("06fee5c7-0daf-4c8c-9271-4c14f26d5e2a"),
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 16, DateTimeKind.Utc).AddTicks(4108),
                            Name = "Фитнесс бар"
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.StatisticNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntriesQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StatisticNotes", "FClub.AccessControl");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMultiBranches")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tariffs", "FClub.AccessControl");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c99c8b78-e28d-4696-87be-70e0e02716ba"),
                            AllowMultiBranches = false,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 20, DateTimeKind.Utc).AddTicks(8809),
                            Name = "Ligth"
                        },
                        new
                        {
                            Id = new Guid("880c1cc1-e67a-4fc2-aa02-4066cb54f794"),
                            AllowMultiBranches = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 20, DateTimeKind.Utc).AddTicks(9115),
                            Name = "Standart"
                        },
                        new
                        {
                            Id = new Guid("5973248c-c6b4-4858-8f96-3888db6340bd"),
                            AllowMultiBranches = true,
                            CreatedDate = new DateTime(2025, 4, 24, 19, 38, 19, 20, DateTimeKind.Utc).AddTicks(9118),
                            Name = "Pro"
                        });
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Turnstile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Turnstiles", "FClub.AccessControl");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Branch", b =>
                {
                    b.OwnsOne("FClub.Backend.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches", "FClub.AccessControl");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");

                            b1.HasData(
                                new
                                {
                                    BranchId = new Guid("097f561c-5ace-4e10-b5c6-53d1e3de4f03"),
                                    City = "Москва",
                                    Country = "Россия",
                                    HouseNumber = "2к1",
                                    Street = "ул. Покрышкина"
                                },
                                new
                                {
                                    BranchId = new Guid("34a71229-c73a-44a3-ba97-a8f528a4b056"),
                                    City = "Москва",
                                    Country = "Россия",
                                    HouseNumber = "59",
                                    Street = "ул. Профсоюзная"
                                },
                                new
                                {
                                    BranchId = new Guid("2a74ff8d-d12a-4dd7-9b2a-0ff744603b5b"),
                                    City = "Москва",
                                    Country = "Россия",
                                    HouseNumber = "17",
                                    Street = "ул. Тверская"
                                },
                                new
                                {
                                    BranchId = new Guid("0d4c30ca-4ad3-4881-971c-0855de9c63ed"),
                                    City = "Санкт-Петербург",
                                    Country = "Россия",
                                    HouseNumber = "11/2",
                                    Street = "Невский пр."
                                },
                                new
                                {
                                    BranchId = new Guid("95a1368b-142b-455b-933c-3ac4f936de69"),
                                    City = "Екатеринбург",
                                    Country = "Россия",
                                    HouseNumber = "32",
                                    Street = "пр. Ленина"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients", "FClub.AccessControl");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.HasData(
                                new
                                {
                                    ClientId = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                                    FirstName = "Евгения",
                                    Patronymic = "Алексеевна",
                                    SecondName = "Иолович"
                                },
                                new
                                {
                                    ClientId = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                                    FirstName = "Иванов",
                                    Patronymic = "Иванович",
                                    SecondName = "Иван"
                                },
                                new
                                {
                                    ClientId = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                                    FirstName = "Петров",
                                    Patronymic = "Петрович",
                                    SecondName = "Петр"
                                },
                                new
                                {
                                    ClientId = new Guid("1db4505a-02f3-49a5-9837-aec1b0ecca44"),
                                    FirstName = "Иван",
                                    Patronymic = "Иванович",
                                    SecondName = "Иванов"
                                },
                                new
                                {
                                    ClientId = new Guid("287bc96f-469a-4acb-9f83-ca0932c787e2"),
                                    FirstName = "Петр",
                                    Patronymic = "Петрович",
                                    SecondName = "Петров"
                                },
                                new
                                {
                                    ClientId = new Guid("754d703a-f1ea-425a-b3eb-b98829627774"),
                                    FirstName = "Анна",
                                    Patronymic = "Сергеевна",
                                    SecondName = "Сидорова"
                                },
                                new
                                {
                                    ClientId = new Guid("d789e2e0-13d7-4fdb-9b38-2df0675525fc"),
                                    FirstName = "Мария",
                                    Patronymic = "Алексеевна",
                                    SecondName = "Кузнецова"
                                },
                                new
                                {
                                    ClientId = new Guid("3294e0e3-6409-431b-8ed2-db3819ebc635"),
                                    FirstName = "Алексей",
                                    Patronymic = "Дмитриевич",
                                    SecondName = "Смирнов"
                                },
                                new
                                {
                                    ClientId = new Guid("ed8a6578-96f3-4891-a816-ef0559b27ed3"),
                                    FirstName = "Елена",
                                    Patronymic = "Викторовна",
                                    SecondName = "Попова"
                                },
                                new
                                {
                                    ClientId = new Guid("a783ccef-eaf0-415d-b72a-6dffeeb247f5"),
                                    FirstName = "Дмитрий",
                                    Patronymic = "Олегович",
                                    SecondName = "Васильев"
                                },
                                new
                                {
                                    ClientId = new Guid("d1cbac4f-29bb-46ad-a6dd-b987523de71a"),
                                    FirstName = "Ольга",
                                    Patronymic = "Игоревна",
                                    SecondName = "Новикова"
                                });
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.EntryLog", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Client", "Client")
                        .WithMany("EntryLogs")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Turnstile", "Turnstile")
                        .WithMany("Logs")
                        .HasForeignKey("TurnstileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Turnstile");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Membership", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Branch", "Branch")
                        .WithMany("Memberships")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Client", "Client")
                        .WithOne("Membership")
                        .HasForeignKey("AccessControl.Domain.Entities.Membership", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Tariff", "Tariff")
                        .WithMany("Memberships")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Client");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Branch", "Branch")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Service", "Service")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Tariff", "Tariff")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.StatisticNote", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Branch", "Branch")
                        .WithMany("StatisticNotes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Turnstile", b =>
                {
                    b.HasOne("AccessControl.Domain.Entities.Branch", "Branch")
                        .WithMany("Turnstiles")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AccessControl.Domain.Entities.Service", "Service")
                        .WithMany("Turnstiles")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceBranches");

                    b.Navigation("StatisticNotes");

                    b.Navigation("Turnstiles");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Client", b =>
                {
                    b.Navigation("EntryLogs");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceBranches");

                    b.Navigation("ServiceTariffs");

                    b.Navigation("Turnstiles");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Tariff", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceTariffs");
                });

            modelBuilder.Entity("AccessControl.Domain.Entities.Turnstile", b =>
                {
                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
