// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Notifications.Infrastructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Notifications.Infrastructure.Migrations.AppDb
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FClub.Notifications")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Notifications.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("AppUsers", "FClub.Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                            IsBlocked = false
                        },
                        new
                        {
                            Id = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                            IsBlocked = false
                        },
                        new
                        {
                            Id = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                            IsBlocked = false
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastEntry")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastNotification")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients", "FClub.Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1db4505a-02f3-49a5-9837-aec1b0ecca44"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(4636),
                            Email = "ivanov@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79991234567"
                        },
                        new
                        {
                            Id = new Guid("287bc96f-469a-4acb-9f83-ca0932c787e2"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(4926),
                            Email = "petrov@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79992345678"
                        },
                        new
                        {
                            Id = new Guid("754d703a-f1ea-425a-b3eb-b98829627774"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(4955),
                            Email = "sidorova@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79993456789"
                        },
                        new
                        {
                            Id = new Guid("d789e2e0-13d7-4fdb-9b38-2df0675525fc"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(4977),
                            Email = "kuznetsova@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79994567890"
                        },
                        new
                        {
                            Id = new Guid("3294e0e3-6409-431b-8ed2-db3819ebc635"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(4994),
                            Email = "smirnov@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79995678901"
                        },
                        new
                        {
                            Id = new Guid("ed8a6578-96f3-4891-a816-ef0559b27ed3"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(5011),
                            Email = "popova@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79996789012"
                        },
                        new
                        {
                            Id = new Guid("a783ccef-eaf0-415d-b72a-6dffeeb247f5"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(5028),
                            Email = "vasilev@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79997890123"
                        },
                        new
                        {
                            Id = new Guid("d1cbac4f-29bb-46ad-a6dd-b987523de71a"),
                            AllowNotifications = false,
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 398, DateTimeKind.Utc).AddTicks(5044),
                            Email = "novikova@example.com",
                            LastEntry = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastNotification = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Phone = "+79998901234"
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Notifications", "FClub.Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25231d83-5027-4615-9c94-0ab57e4f2a0c"),
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 392, DateTimeKind.Utc).AddTicks(7397),
                            Text = "\r\n            <!DOCTYPE html>\r\n            <html>\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <title>Мы скучаем по вам!</title>\r\n                <style>\r\n                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n                    .header { background-color: #f0ad4e; color: white; padding: 20px; text-align: center; }\r\n                    .content { padding: 20px; background-color: #f9f9f9; }\r\n                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #777; }\r\n                    .button { display: inline-block; padding: 10px 20px; background-color: #f0ad4e; color: white; text-decoration: none; border-radius: 4px; }\r\n                    .discount { font-size: 24px; color: #d9534f; font-weight: bold; }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div class=\"container\">\r\n                    <div class=\"header\">\r\n                        <h1>{client.Name}, мы скучаем по вам!</h1>\r\n                    </div>\r\n                    <div class=\"content\">\r\n                        <p>Дорогой {client.Name},</p>\r\n                        <p>Мы заметили, что вы давно не посещали наши филиалы, и очень по вам скучаем!</p>\r\n            \r\n                        <p>Хотим напомнить, что у нас есть много интересных предложений и новых услуг, которые могут вас заинтересовать.</p>\r\n            \r\n                        <p class=\"discount\">Специально для вас - скидка 15% на первую услугу при посещении в этом месяце!</p>\r\n            \r\n                        <p>Просто покажите это письмо при посещении, чтобы получить скидку.</p>\r\n            \r\n                        <p style=\"text-align: center;\">\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" class=\"button\">Посмотреть акции</a>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"footer\">\r\n                        <p>© 2025 FClub. Все права защищены.</p>\r\n                        <p>\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Сайт</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Контакты</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Отписаться</a>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n            </html>\r\n        ",
                            Title = "Оповещение о посещаемости"
                        },
                        new
                        {
                            Id = new Guid("0640b04c-67e3-4899-9a0a-812df0a7151e"),
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 392, DateTimeKind.Utc).AddTicks(7677),
                            Text = "\r\n            <!DOCTYPE html>\r\n            <html>\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <title>Новый тариф</title>\r\n                <style>\r\n                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n                    .header { background-color: #5cb85c; color: white; padding: 20px; text-align: center; }\r\n                    .content { padding: 20px; background-color: #f9f9f9; }\r\n                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #777; }\r\n                    .button { display: inline-block; padding: 10px 20px; background-color: #5cb85c; color: white; text-decoration: none; border-radius: 4px; }\r\n                    .price { font-size: 24px; color: #5cb85c; font-weight: bold; }\r\n                    ul { padding-left: 20px; }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div class=\"container\">\r\n                    <div class=\"header\">\r\n                        <h1>Новый тариф \"{tariff.Name}\"</h1>\r\n                    </div>\r\n                    <div class=\"content\">\r\n                        <p>Уважаемый клиент,</p>\r\n                        <p>Мы рады представить вам наш новый тарифный план, который создан специально для вас!</p>\r\n            \r\n                        <h3>Доступные услуги:</h3>\r\n                        <ul>{tariff.ServicesList}</ul>\r\n            \r\n                        <p class=\"price\">{tariff.Price}</p>\r\n            \r\n                        <p>{tariff.AllowMultiBranches}</p>\r\n            \r\n                        <p style=\"text-align: center;\">\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" class=\"button\">Подробнее о тарифе</a>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"footer\">\r\n                        <p>© 2025 FClub. Все права защищены.</p>\r\n                        <p>\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Сайт</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Контакты</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Отписаться</a>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n            </html>\r\n        ",
                            Title = "Оповещение о тарифе"
                        },
                        new
                        {
                            Id = new Guid("e5ed7259-844d-4b5f-87c9-5814663e8d6d"),
                            CreatedDate = new DateTime(2025, 4, 22, 20, 41, 54, 392, DateTimeKind.Utc).AddTicks(7780),
                            Text = "\r\n            <!DOCTYPE html>\r\n            <html>\r\n            <head>\r\n                <meta charset=\"UTF-8\">\r\n                <title>Открытие нового филиала</title>\r\n                <style>\r\n                    body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n                    .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n                    .header { background-color: #4a6fa5; color: white; padding: 20px; text-align: center; }\r\n                    .content { padding: 20px; background-color: #f9f9f9; }\r\n                    .footer { padding: 20px; text-align: center; font-size: 12px; color: #777; }\r\n                    .button { display: inline-block; padding: 10px 20px; background-color: #4a6fa5; color: white; text-decoration: none; border-radius: 4px; }\r\n                    ul { padding-left: 20px; }\r\n                </style>\r\n            </head>\r\n            <body>\r\n                <div class=\"container\">\r\n                    <div class=\"header\">\r\n                        <h1>Открытие нового филиала!</h1>\r\n                    </div>\r\n                    <div class=\"content\">\r\n                        <p>Уважаемый клиент,</p>\r\n                        <p>Мы рады сообщить вам об открытии нового филиала <strong>{branch.Name}</strong> по адресу: <strong>{branch.Address}</strong>.</p>\r\n            \r\n                        <h3>В новом филиале доступны услуги:</h3>\r\n                        <ul>{branch.ServicesList}</ul>\r\n            \r\n                        <p>Приглашаем вас посетить наш новый филиал и воспользоваться нашими услугами.</p>\r\n            \r\n                        <p style=\"text-align: center;\">\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\" class=\"button\">Посмотреть на карте</a>\r\n                        </p>\r\n                    </div>\r\n                    <div class=\"footer\">\r\n                        <p>© 2025 FClub. Все права защищены.</p>\r\n                        <p>\r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Сайт</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Контакты</a> | \r\n                            <a href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Отписаться</a>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </body>\r\n            </html>\r\n        ",
                            Title = "Оповещение о филиале"
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowAttendanceNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowBranchfNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowTariffNotifications")
                        .HasColumnType("boolean");

                    b.Property<string>("AttendanceEmailSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("AttendanceNotificationId")
                        .HasColumnType("uuid");

                    b.Property<long>("AttendanceNotificationPeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("AttendanceNotificationReSendPeriod")
                        .HasColumnType("bigint");

                    b.Property<string>("BranchEmailSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("BranchNotificationId")
                        .HasColumnType("uuid");

                    b.Property<string>("TariffEmailSubject")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TariffNotificationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceNotificationId")
                        .IsUnique();

                    b.HasIndex("BranchNotificationId")
                        .IsUnique();

                    b.HasIndex("TariffNotificationId")
                        .IsUnique();

                    b.ToTable("NotificationSettings", "FClub.Notifications");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20b972d8-338a-4cbe-b734-9e1f6e225c40"),
                            AllowAttendanceNotifications = true,
                            AllowBranchfNotifications = true,
                            AllowTariffNotifications = true,
                            AttendanceEmailSubject = "Вас давно с нами не было!",
                            AttendanceNotificationId = new Guid("25231d83-5027-4615-9c94-0ab57e4f2a0c"),
                            AttendanceNotificationPeriod = 7L,
                            AttendanceNotificationReSendPeriod = 7L,
                            BranchEmailSubject = "Мы расширяемся!",
                            BranchNotificationId = new Guid("e5ed7259-844d-4b5f-87c9-5814663e8d6d"),
                            TariffEmailSubject = "У нас новинки!",
                            TariffNotificationId = new Guid("0640b04c-67e3-4899-9a0a-812df0a7151e")
                        });
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients", "FClub.Notifications");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.HasData(
                                new
                                {
                                    ClientId = new Guid("1db4505a-02f3-49a5-9837-aec1b0ecca44"),
                                    FirstName = "Иван",
                                    Patronymic = "Иванович",
                                    SecondName = "Иванов"
                                },
                                new
                                {
                                    ClientId = new Guid("287bc96f-469a-4acb-9f83-ca0932c787e2"),
                                    FirstName = "Петр",
                                    Patronymic = "Петрович",
                                    SecondName = "Петров"
                                },
                                new
                                {
                                    ClientId = new Guid("754d703a-f1ea-425a-b3eb-b98829627774"),
                                    FirstName = "Анна",
                                    Patronymic = "Сергеевна",
                                    SecondName = "Сидорова"
                                },
                                new
                                {
                                    ClientId = new Guid("d789e2e0-13d7-4fdb-9b38-2df0675525fc"),
                                    FirstName = "Мария",
                                    Patronymic = "Алексеевна",
                                    SecondName = "Кузнецова"
                                },
                                new
                                {
                                    ClientId = new Guid("3294e0e3-6409-431b-8ed2-db3819ebc635"),
                                    FirstName = "Алексей",
                                    Patronymic = "Дмитриевич",
                                    SecondName = "Смирнов"
                                },
                                new
                                {
                                    ClientId = new Guid("ed8a6578-96f3-4891-a816-ef0559b27ed3"),
                                    FirstName = "Елена",
                                    Patronymic = "Викторовна",
                                    SecondName = "Попова"
                                },
                                new
                                {
                                    ClientId = new Guid("a783ccef-eaf0-415d-b72a-6dffeeb247f5"),
                                    FirstName = "Дмитрий",
                                    Patronymic = "Олегович",
                                    SecondName = "Васильев"
                                },
                                new
                                {
                                    ClientId = new Guid("d1cbac4f-29bb-46ad-a6dd-b987523de71a"),
                                    FirstName = "Ольга",
                                    Patronymic = "Игоревна",
                                    SecondName = "Новикова"
                                });
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("Notifications.Domain.Entities.NotificationSettings", b =>
                {
                    b.HasOne("Notifications.Domain.Entities.Notification", "AttendanceNotification")
                        .WithOne("AttendanceNotificationSettings")
                        .HasForeignKey("Notifications.Domain.Entities.NotificationSettings", "AttendanceNotificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Notifications.Domain.Entities.Notification", "BranchNotification")
                        .WithOne("BranchNotificationSettings")
                        .HasForeignKey("Notifications.Domain.Entities.NotificationSettings", "BranchNotificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Notifications.Domain.Entities.Notification", "TariffNotification")
                        .WithOne("TariffNotificationSettings")
                        .HasForeignKey("Notifications.Domain.Entities.NotificationSettings", "TariffNotificationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AttendanceNotification");

                    b.Navigation("BranchNotification");

                    b.Navigation("TariffNotification");
                });

            modelBuilder.Entity("Notifications.Domain.Entities.Notification", b =>
                {
                    b.Navigation("AttendanceNotificationSettings")
                        .IsRequired();

                    b.Navigation("BranchNotificationSettings")
                        .IsRequired();

                    b.Navigation("TariffNotificationSettings")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
