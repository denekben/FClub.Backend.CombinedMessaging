// <auto-generated />
using System;
using Management.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Management.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422151134_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FClub.Management")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Management.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUsers", "FClub.Management");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 32, 874, DateTimeKind.Utc).AddTicks(4645),
                            Email = "iolovich@yandex.ru",
                            IsBlocked = false,
                            PasswordHash = "9A7A299E858598882D202C4CED142139D288F090B8432E0AB0D3A9794266F5D3D0762B2FB8B303A6CE8B3502AA98317E1A3CCD8031E00AB1794F48A63A5C14DB:6E5A14685412CD0C2B457F3A58FE45497D8055F553B9609121C180FAB11E0741EE63DDF17C6B1B581B351DDEB72C75B4CAB9C088C4068354ADAA7F9EAF4D00C9",
                            Phone = "+78005553535",
                            RefreshToken = "NWWL7PE1LpuX7vBa7+AeCfrRdlZgFRcDANzdBMYKL4QkjiP2pMD/KluxydHMTgqubYh8WU7HRD6jUOiWb9FI5g==",
                            RefreshTokenExpires = new DateTime(2026, 4, 17, 15, 11, 32, 872, DateTimeKind.Utc).AddTicks(7665),
                            RoleId = new Guid("ef1cc695-887f-4251-95c4-8442350c446a")
                        },
                        new
                        {
                            Id = new Guid("a8085988-e681-4f9d-85f8-e99e2fa4aeec"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 33, 99, DateTimeKind.Utc).AddTicks(211),
                            Email = "denekben@yandex.ru",
                            IsBlocked = false,
                            PasswordHash = "42981065BCC7892EE956E4440693C6A858E9C4CB257FDDBA5CD16A8BD29D0D7A288927373570F14E1F81691D04D43742F4A7FB29491BB9B18C62F892B61D720A:C8631BB40F75902A1EBF194D5C725FA1ED432D9699BC98E494CCC6B3E824FB8A596C2AD7A6AF55907BB8E3CAA77495DAC9A50231AA3B9FBDB9B1B6F37BE0CDDA",
                            Phone = "+79991001010",
                            RefreshToken = "E5FboOV+s0ux0Fi0BNSxVBe2VdSLdjDbBhybC/RW8r9JPl8a5ti+2Q+QOeB46lhctzZPZ7tzZ7XGO2bSv2P/vg==",
                            RefreshTokenExpires = new DateTime(2026, 4, 17, 15, 11, 33, 98, DateTimeKind.Utc).AddTicks(9906),
                            RoleId = new Guid("ef1cc695-887f-4251-95c4-8442350c446a")
                        },
                        new
                        {
                            Id = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 33, 326, DateTimeKind.Utc).AddTicks(889),
                            Email = "ivanov@yandex.ru",
                            IsBlocked = false,
                            PasswordHash = "EF95E620BE376B8BD9D44BE4A70B7D4B2FEDF46D02C7C04FA618AC99F6AD2EFF019B95F76B2D200567498A1F134672D487947BD57E4915764B55ED702867BB48:C8E3A5BCFD4A2F8C4B6B72E8DEDFDB0B8E8E5158E5118135D439439885D752841A3B1A05005F4A3722EAB67646405C02CC171C68D499617D2051F9830DEA4EC7",
                            Phone = "+78005553535",
                            RefreshToken = "a+yoWXt/xd/wOoM9uyXMBCmYsShd4i9lfq7HYzuESbBOVdSGV9Dq3ci8oT83o5Y6txvRk6Wg6YPN2hK5xJliGw==",
                            RefreshTokenExpires = new DateTime(2026, 4, 17, 15, 11, 33, 326, DateTimeKind.Utc).AddTicks(613),
                            RoleId = new Guid("392a606f-b149-4027-af24-a5d1637698e3")
                        },
                        new
                        {
                            Id = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                            AllowEntry = true,
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 33, 546, DateTimeKind.Utc).AddTicks(905),
                            Email = "ivanova@yandex.ru",
                            IsBlocked = false,
                            PasswordHash = "6A59529AC42DD3EA05B52ED6892D88F42437692A0A3BA72D672D2129A21D2F67EDCEEB83B6587659DFD84748FA34DCF14B65FCA1750964FF092D7DC9E5672A36:35CEE321F6C7B1F00E4DDEE0FE781431721C72A2730BF68FC4D4FA328D904F66DAFE278F7B042D0B9203F1F0B72053F7CF20E670B0C3A6A0C5E74B0FCBAF2387",
                            Phone = "+79991001010",
                            RefreshToken = "6i0Km5d7TwvcusudbSJXODcBjykilqQHisyaK335VHnCAuI26bempdkF7+Qiz9N7KwODZ8Zf+8ck5zhA088LkA==",
                            RefreshTokenExpires = new DateTime(2026, 4, 17, 15, 11, 33, 546, DateTimeKind.Utc).AddTicks(653),
                            RoleId = new Guid("392a606f-b149-4027-af24-a5d1637698e3")
                        });
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("MaxOccupancy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid?>("SocialGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId")
                        .IsUnique();

                    b.HasIndex("SocialGroupId");

                    b.ToTable("Clients", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MonthQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TariffId");

                    b.ToTable("Memberships", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBranches", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TariffId");

                    b.ToTable("ServiceTariffs", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", "FClub.Management");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef1cc695-887f-4251-95c4-8442350c446a"),
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 32, 650, DateTimeKind.Utc).AddTicks(1236),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("392a606f-b149-4027-af24-a5d1637698e3"),
                            CreatedDate = new DateTime(2025, 4, 22, 15, 11, 32, 650, DateTimeKind.Utc).AddTicks(2790),
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Management.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Services", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.SocialGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SocialGroups", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.StatisticNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("MembershipCost")
                        .HasColumnType("double precision");

                    b.Property<int>("MembershipQuantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StatisticNotes", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMultiBranches")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiscountForSocialGroup")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriceForNMonths")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tariffs", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Management.Domain.Entities.Role", "Role")
                        .WithMany("AppUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("AppUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");

                            b1.HasData(
                                new
                                {
                                    AppUserId = new Guid("58be07ff-8668-4d38-9c76-c0f3b805fe57"),
                                    FirstName = "Евгения",
                                    Patronymic = "Алексеевна",
                                    SecondName = "Иолович"
                                },
                                new
                                {
                                    AppUserId = new Guid("a8085988-e681-4f9d-85f8-e99e2fa4aeec"),
                                    FirstName = "Курбанаев",
                                    Patronymic = "Алексеевич",
                                    SecondName = "Денис"
                                },
                                new
                                {
                                    AppUserId = new Guid("40416adb-dfe7-4533-ae73-80c7dd6f2e6e"),
                                    FirstName = "Иванов",
                                    Patronymic = "Иванович",
                                    SecondName = "Иван"
                                },
                                new
                                {
                                    AppUserId = new Guid("6d9ffd62-5bd7-451e-a1f2-548ea313effb"),
                                    FirstName = "Иванова",
                                    Patronymic = "Ибрагимовна",
                                    SecondName = "Иванка"
                                });
                        });

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.OwnsOne("FClub.Backend.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Management.Domain.Entities.Client", b =>
                {
                    b.HasOne("Management.Domain.Entities.Membership", "Membership")
                        .WithOne("Client")
                        .HasForeignKey("Management.Domain.Entities.Client", "MembershipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Management.Domain.Entities.SocialGroup", "SocialGroup")
                        .WithMany("Clients")
                        .HasForeignKey("SocialGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("SocialGroup");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("Memberships")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Tariff", "Tariff")
                        .WithMany("Memberships")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.HasOne("Management.Domain.Entities.Service", "Service")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Tariff", "Tariff")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Management.Domain.Entities.StatisticNote", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("StatisticNotes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceBranches");

                    b.Navigation("StatisticNotes");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("Management.Domain.Entities.Role", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Management.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceBranches");

                    b.Navigation("ServiceTariffs");
                });

            modelBuilder.Entity("Management.Domain.Entities.SocialGroup", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Management.Domain.Entities.Tariff", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceTariffs");
                });
#pragma warning restore 612, 618
        }
    }
}
