// <auto-generated />
using System;
using Management.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Management.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250414141444_Init2")]
    partial class Init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("FClub.Management")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Management.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AppUsers", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("MaxOccupancy")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Branches", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowEntry")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowNotifications")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MembershipId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<Guid?>("SocialGroupId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId")
                        .IsUnique();

                    b.HasIndex("SocialGroupId");

                    b.ToTable("Clients", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MonthQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.Property<double>("TotalCost")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("TariffId");

                    b.ToTable("Memberships", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceBranches", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TariffId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TariffId");

                    b.ToTable("ServiceTariffs", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Roles", "FClub.Management");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5664aa8d-4123-4142-82db-6d621946e126"),
                            CreatedDate = new DateTime(2025, 4, 14, 14, 14, 43, 596, DateTimeKind.Utc).AddTicks(7652),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("fee7a5a4-653b-476b-bdfe-44282cc49f0f"),
                            CreatedDate = new DateTime(2025, 4, 14, 14, 14, 43, 596, DateTimeKind.Utc).AddTicks(8043),
                            Name = "Manager"
                        });
                });

            modelBuilder.Entity("Management.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Services", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.SocialGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("SocialGroups", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.StatisticNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("MembershipCost")
                        .HasColumnType("double precision");

                    b.Property<long>("MembershipQuantity")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("StatisticNotes", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.Tariff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AllowMultiBranches")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiscountForSocialGroup")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PriceForNMonths")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Tariffs", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.UserLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AppUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserLogs", "FClub.Management");
                });

            modelBuilder.Entity("Management.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("Management.Domain.Entities.Role", "Role")
                        .WithMany("AppUsers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("AppUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("AppUserId");

                            b1.ToTable("AppUsers", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("AppUserId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.OwnsOne("FClub.Backend.Common.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("BranchId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Country")
                                .HasColumnType("text");

                            b1.Property<string>("HouseNumber")
                                .HasColumnType("text");

                            b1.Property<string>("Street")
                                .HasColumnType("text");

                            b1.HasKey("BranchId");

                            b1.ToTable("Branches", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("BranchId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Management.Domain.Entities.Client", b =>
                {
                    b.HasOne("Management.Domain.Entities.Membership", "Membership")
                        .WithOne("Client")
                        .HasForeignKey("Management.Domain.Entities.Client", "MembershipId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Management.Domain.Entities.SocialGroup", "SocialGroup")
                        .WithMany("Clients")
                        .HasForeignKey("SocialGroupId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("FClub.Backend.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients", "FClub.Management");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Membership");

                    b.Navigation("SocialGroup");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("Memberships")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Tariff", "Tariff")
                        .WithMany("Memberships")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceBranch", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Service", "Service")
                        .WithMany("ServiceBranches")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Management.Domain.Entities.Pivots.ServiceTariff", b =>
                {
                    b.HasOne("Management.Domain.Entities.Service", "Service")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Management.Domain.Entities.Tariff", "Tariff")
                        .WithMany("ServiceTariffs")
                        .HasForeignKey("TariffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Tariff");
                });

            modelBuilder.Entity("Management.Domain.Entities.StatisticNote", b =>
                {
                    b.HasOne("Management.Domain.Entities.Branch", "Branch")
                        .WithMany("StatisticNotes")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("Management.Domain.Entities.UserLog", b =>
                {
                    b.HasOne("Management.Domain.Entities.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Management.Domain.Entities.Branch", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceBranches");

                    b.Navigation("StatisticNotes");
                });

            modelBuilder.Entity("Management.Domain.Entities.Membership", b =>
                {
                    b.Navigation("Client")
                        .IsRequired();
                });

            modelBuilder.Entity("Management.Domain.Entities.Role", b =>
                {
                    b.Navigation("AppUsers");
                });

            modelBuilder.Entity("Management.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServiceBranches");

                    b.Navigation("ServiceTariffs");
                });

            modelBuilder.Entity("Management.Domain.Entities.SocialGroup", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Management.Domain.Entities.Tariff", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ServiceTariffs");
                });
#pragma warning restore 612, 618
        }
    }
}
